// Mocks generated by Mockito 5.4.2 from annotations
// in layout_basics/test/fixtures/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i11;
import 'dart:typed_data' as _i12;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i5;
import 'package:layout_basics/core/error/failures.dart' as _i7;
import 'package:layout_basics/core/usecase/usecase.dart' as _i10;
import 'package:layout_basics/features/todo/data/datasources/local_data_source.dart'
    as _i8;
import 'package:layout_basics/features/todo/data/models/task_model.dart' as _i3;
import 'package:layout_basics/features/todo/domain/repositories/task_repository.dart'
    as _i4;
import 'package:layout_basics/features/todo/domain/usecases/get_tasks.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskModel_1 extends _i1.SmartFake implements _i3.TaskModel {
  _FakeTaskModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskRepository_2 extends _i1.SmartFake
    implements _i4.TaskRepository {
  _FakeTaskRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i4.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i3.TaskModel>>> getTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i3.TaskModel>>>.value(
                _FakeEither_0<_i7.Failure, List<_i3.TaskModel>>(
          this,
          Invocation.method(
            #getTasks,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i3.TaskModel>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>> getTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>>.value(
            _FakeEither_0<_i7.Failure, _i3.TaskModel>(
          this,
          Invocation.method(
            #getTask,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>> updateTask(
          _i3.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>>.value(
            _FakeEither_0<_i7.Failure, _i3.TaskModel>(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> deleteTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, String>>.value(
            _FakeEither_0<_i7.Failure, String>(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, String>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>> createTask(
          _i3.TaskModel? newTask) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [newTask],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>>.value(
            _FakeEither_0<_i7.Failure, _i3.TaskModel>(
          this,
          Invocation.method(
            #createTask,
            [newTask],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i3.TaskModel>>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i8.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i3.TaskModel>> getTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue: _i6.Future<List<_i3.TaskModel>>.value(<_i3.TaskModel>[]),
      ) as _i6.Future<List<_i3.TaskModel>>);
  @override
  _i6.Future<_i3.TaskModel?> getTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [id],
        ),
        returnValue: _i6.Future<_i3.TaskModel?>.value(),
      ) as _i6.Future<_i3.TaskModel?>);
  @override
  _i6.Future<_i3.TaskModel> createTask(_i3.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i6.Future<_i3.TaskModel>.value(_FakeTaskModel_1(
          this,
          Invocation.method(
            #createTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i3.TaskModel>);
  @override
  _i6.Future<_i3.TaskModel> updateTask(_i3.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i6.Future<_i3.TaskModel>.value(_FakeTaskModel_1(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i3.TaskModel>);
  @override
  _i6.Future<String> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<bool> storeTasks(List<_i3.TaskModel>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeTasks,
          [tasks],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [GetTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTasksUseCase extends _i1.Mock implements _i9.GetTasksUseCase {
  MockGetTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.TaskRepository);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i3.TaskModel>>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i3.TaskModel>>>.value(
                _FakeEither_0<_i7.Failure, List<_i3.TaskModel>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i3.TaskModel>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<_i12.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i12.Uint8List>.value(_i12.Uint8List(0)),
      ) as _i6.Future<_i12.Uint8List>);
  @override
  _i6.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
