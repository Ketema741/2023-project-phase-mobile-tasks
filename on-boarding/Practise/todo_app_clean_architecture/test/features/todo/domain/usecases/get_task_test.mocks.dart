// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app_clean_architecture/test/features/todo/domain/usecases/get_task_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app_clean_architecture/core/error/failures.dart' as _i5;
import 'package:todo_app_clean_architecture/features/todo/domain/entities/task.dart'
    as _i6;
import 'package:todo_app_clean_architecture/features/todo/domain/repositories/task_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> createTask(_i6.Task? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
            _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #createTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> getTask(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
            _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #getTask,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> updateTask(_i6.Task? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
            _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> completeTask(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
            _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #completeTask,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> removeTask(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTask,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
            _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #removeTask,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>> viewAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #viewAllTasks,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Task>>(
          this,
          Invocation.method(
            #viewAllTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>);
}
